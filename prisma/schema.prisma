generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model SmartContract {
  id                        Int                     @id @default(autoincrement())
  contract_key              String                  @unique
  name                      String
  scanned_transactions      Int                     @default(0)
  type                      String

  chain                     Chain @relation(fields: [chain], references: [id])
  chain_id                  Int

  commission                Commission?
  smart_contract_functions  SmartContractFunction[]

  created_at                DateTime     @default(now())
  updated_at                DateTime     @updatedAt
}

model SmartContractFunction {
  id                Int     @id @default(autoincrement())
  name              String
  function_name     String
  args              Json

  smart_contract    SmartContract @relation(fields: [smart_contract_id], references: [id])
  smart_contract_id Int

  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Commission {
  id                        Int     @id @default(autoincrement())
  commission_key            String  @unique
  custodial                 Boolean
  amount                    Int?

  smart_contract            SmartContract @relation(fields: [smart_contract], references: [id])
  smart_contract_id         Int

  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
}

model Chain {
  id                Int     @id @default(autoincrement())
  name              String

  smart_contracts   SmartContract[]
  nft_metas         NftMeta[]

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Collection {
  id              Int     @id @default(autoincrement())
  asset_name      String
  collection_size Int?
  description     String?
  external_url    String?
  volume          Int     @default(0)
  floor           Int     @default(0)
  cover_image     String?
  trending        Boolean @default(false)
  title           String?
  frozen          Boolean @default(false)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  metas           Meta[]
}

model NftMeta {
  id            Int     @id @default(autoincrement())
  name          String
  namespace     String?
  image         String
  token_id      Int
  rarity        Int?
  ranking       Int
  burned        Boolean @default(false)
  asset_name    String?
  grouping      String?

  collection    Collection @relation(fields: [collection_id], references: [id])
  collection_id Int

  chain         Chain @relation(fields: [chain_id], references: [id])
  chain_id      Int

  nft_meta_bns  NftMetaBns

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model NftMetaBns {
  id            Int     @id @default(autoincrement())
  name          String
  namespace     String

  meta          Meta @relation(fields: [meta], references: [id])
  meta_id       Int
}

enum Chain {
  Near
  Stacks
}

